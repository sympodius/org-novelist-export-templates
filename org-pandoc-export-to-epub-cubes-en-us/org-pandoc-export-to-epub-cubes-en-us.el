;;; org-pandoc-export-to-epub-cubes-en-us.el --- Org Novelist export template to ePub -*- lexical-binding: t; -*-

;; Example export template for Org Novelist.
;; Copyright (c) 2023 John Urquhart Ferguson
;;
;; Author: John Urquhart Ferguson <mail@johnurquhartferguson.info>
;; Maintainer: John Urquhart Ferguson <mail@johnurquhartferguson.info>
;; URL: https://johnurquhartferguson.info
;; Keywords: fiction, writing, outlines
;; Prefix: org-novelist
;; Package-Requires: ((emacs "28.1") (org "9.5.5"))

;; Version 0.0.3

;; This file is not part of GNU Emacs.
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program. If not, see https://www.gnu.org/licenses/.

;;; Commentary:
;;
;; Org Novelist is a methodology for writing novel-length fiction using
;; Org mode within Emacs. It involves creating and laying out Org mode
;; files such that notes and plans can be easily created and quickly
;; accessed while writing the main text of a story. Org Novelist's
;; secondary function is the ability to use this known structure to
;; easily export and publish stories to other formats. This package
;; supplies an example export to the standard Org mode PDF format.
;;
;; Creating, linking, and laying out files in the Org Novelist
;; methodology can be done without the use of Emacs or the Org Novelist
;; package, but using the package within Emacs will provide helper
;; functions that make the methodology much easier to use; allowing the
;; following of links, programmatic updating of crossreferences, and
;; ability to programatically export to other formats.
;;
;; Installation, Activation, and Documentation
;; -------------------------------------------
;; See the corresponding section of the website at
;;
;;   https://johnurquhartferguson.info
;;
;; Requires Pandoc and Imagemagick.
;; If Calibre's ebook-convert is available, Amazon Kindle azw3 files
;; will also be generated.
;;
;;; Code:

;;;; Require other packages

(require 'org)  ; Org Novelist is built upon the incredible work of Org mode


;;;; User Variables

(defvar opeteceu--publisher "Good and Evil Publishing" "Name for publisher of book.")
(defvar opeteceu--isbn "" "ISBN number of book, if there is one.")
(defvar opeteceu--edition "Early Draft Edition" "Text describing this edition.")
(defvar opeteceu--rights "Creative Commons Attribution-Non-Commercial-ShareAlike 4.0 International License" "Copyright statement or license.")
(defvar opeteceu--language "en-US" "Language for the book.")
(defvar opeteceu--cover "" "Cover image for book when not autogenerated.")
(defvar opeteceu--cover-graphic "/home/sympodius/Git/sympodius/org-novelist-export-templates/org-pandoc-export-to-epub-cubes-en-us/cubes.png" "Cover graphic for cover of book. Empty string prevents autogenerated cover.")
(defvar opeteceu--sigil-graphic "/home/sympodius/Git/sympodius/org-novelist-export-templates/org-pandoc-export-to-epub-cubes-en-us/juf-sigil.png" "Location of image file to use as sigil in legal page.")


;;;; Helper Functions

(defun opeteceu--get-file-property-value (file property)
  "Given an Org FILE, return the value of PROPERTY."
  (let ((value "")
        (regexp (format "^[ \t]*#\\+%s:" (regexp-quote property)))
        (case-fold-search t)
        beg)
    (with-temp-buffer
      (when (file-exists-p file)
        (when (file-readable-p file)
          (insert-file-contents file)
          (goto-char (point-min))
          (while (re-search-forward regexp nil t)
            (when (looking-at-p " ")
              (forward-char))
            (setq beg (point))
            (end-of-line)
            (setq value (org-trim (buffer-substring beg (point))))))))
    value))

(defun opeteceu--fold-show-all ()
  "Run the deprecated `org-show-all' when Org version is less than 9.6.
Otherwise, run `org-fold-show-all'."
  (if (and (>= (string-to-number (nth 0 (split-string (org-version) "\\."))) 9)
           (>= (string-to-number (nth 1 (split-string (org-version) "\\."))) 6))
      (org-fold-show-all)
    (org-show-all)))

(defun opeteceu--format-time-string (format-string &optional time-zone)
  "Run the deprecated `org-format-time-string' when Org version is less than 9.6.
Otherwise, run `format-time-string'.
FORMAT-STRING is the output format.
TIME-ZONE is the given time. If omitted or nil, use local time."
  (if (and (>= (string-to-number (nth 0 (split-string (org-version) "\\."))) 9)
           (>= (string-to-number (nth 1 (split-string (org-version) "\\."))) 6))
      (format-time-string format-string time-zone)
    (org-format-time-string format-string time-zone)))

(defun opeteceu--string-to-file (str filename)
  "Create/Overwrite FILENAME with the contents of STR."
  (catch 'FILE-NOT-WRITABLE
    (if (get-file-buffer filename)
        ;; Filename already open in a buffer. Update buffer and save.
        (with-current-buffer (get-file-buffer filename)
          (erase-buffer)
          (insert str)
          (save-buffer))  ; Calling `save-buffer' with an argument of 0 would stop back-up files being created, but it's probably best to respect the user's Emacs setup in this regard
      ;; Filename not open in a buffer. Just deal with file.
      (with-temp-buffer
        (insert str)
        ;; If directory doesn't exist, create it.
        (unless (file-exists-p (file-name-directory filename))
          (make-directory (file-name-directory filename) t))
        (if (file-writable-p filename)
            (write-region (point-min) (point-max) filename)
          (progn
            (error (concat filename " is not writable"))
            (throw 'FILE-NOT-WRITABLE (concat filename " is not writable"))))))))

(defun opeteceu--delete-current-file (&optional no-prompt)
  "Delete the file associated with the current buffer.
Kill the current buffer too. If no file is associated, just kill buffer without
prompt for save. If NO-PROMPT is non-nil, don't ask user for confirmation."
  (let ((current-file (buffer-file-name)))
    (if no-prompt
        (progn
          (set-buffer-modified-p nil)
          (kill-buffer (current-buffer))
          (when current-file
            (delete-file current-file)))
      (when (yes-or-no-p (concat "Delete file? " current-file " "))
        (kill-buffer (current-buffer))
        (when current-file
          (delete-file current-file))))))

(defun opeteceu--delete-line ()
  "If Emacs version is less than 29, delete line the old fashioned way."
  (let ((inhibit-field-text-motion t))
    (if (>= (string-to-number (nth 0 (split-string (string-trim-left (emacs-version) "GNU Emacs ") "\\."))) 29)
        (delete-line)
      (delete-region (line-beginning-position) (line-beginning-position 2)))))


;;;; Required Entry Point Function for Org Novelist Export

(defun org-novelist--export-template (org-input-file output-file)
  "Given an ORG-INPUT-FILE from Org Novelist, export to OUTPUT-FILE."
  (let ((temp-org (concat (file-name-sans-extension output-file) ".org"))
        (org-export-with-toc-orig nil)
        (org-export-with-title-orig nil)
        (org-export-with-author-orig nil)
        (org-export-with-email-orig nil)
        (org-export-with-date-orig nil)
        (undo-tree-auto-save-history-orig nil)
        curr-heading
        curr-level
        (chap-num 0)
        beg
        cover-graphic-arg
        (title-graphic-arg "")
        title-words
        (title-lines '())
        (curr-line "")
        curr-word
        (curr-title-pos 0)
        ;; The CSS sylesheet for the ePub.
        (cubes-stylesheet
         (concat
          "body {\n"
          "  text-rendering: optimizeLegibility !important;\n"
          "  margin: 5%;\n"
          "  text-align: justify;\n"
          "  font-size: medium;\n"
          "  font-family: serif;\n"
          "  text-transform: none;\n"
          "  text-decoration: none;\n"
          "  font-style: normal;\n"
          "  font-weight: normal;\n"
          "}\n"
          "code { font-family: monospace; }\n"
          "h1, h2, h3, h4, h5, h6 {\n"
          "  font-family: sans-serif;\n"
          "  text-align: right;\n"
          "  text-transform: none;\n"
          "  margin: 0 auto;\n"
          "  font-weight: 100;\n"
          "}\n"
          "h1 {\n"
          "  margin-top: 3em;\n"
          "  line-height: 1.2em;\n"
          "  font-size: 1.8em;\n"
          "}\n"
          "h1.title { }\n"
          "h2.author { }\n"
          "h3.date { }\n"
          "ol.toc {\n"
          "  padding: 0;\n"
          "  margin-left: 1em;\n"
          "}\n"
          "ol.toc li {\n"
          "  list-style-type: none;\n"
          "  margin: 0;\n"
          "  padding: 0;\n"
          "}\n"
          "a.footnoteRef { vertical-align: super; }\n"
          "em, em em em, em em em em em { font-style: italic; }\n"
          "em em, em em em em { font-style: normal; }\n"
          "blockquote { font-style: italic; }\n"
          ".center {\n"
          "  text-align: center;\n"
          "  margin: 0 auto;\n"
          "}\n"
          ".org-center {\n"
          "  text-align: center;\n"
          "  margin: 0 auto;\n"
          "}\n"
          "hr {\n"
          "  text-align: center;\n"
          "  margin-bottom: 4em;\n"
          "}\n"
          "hr::after {\n"
          "  content: '';\n"
          "}\n")))
    (when (boundp 'org-export-with-toc)
      (setq org-export-with-toc-orig org-export-with-toc))
    (when (boundp 'org-export-with-title)
      (setq org-export-with-title-orig org-export-with-title))
    (when (boundp 'org-export-with-author)
      (setq org-export-with-author-orig org-export-with-author))
    (when (boundp 'org-export-with-email)
      (setq org-export-with-email-orig org-export-with-email))
    (when (boundp 'org-export-with-date)
      (setq org-export-with-date-orig org-export-with-date))
    (when (boundp 'undo-tree-auto-save-history)
      (setq undo-tree-auto-save-history-orig undo-tree-auto-save-history))
    (setq org-export-with-toc nil)
    (setq org-export-with-title nil)
    (setq org-export-with-author nil)
    (setq org-export-with-email nil)
    (setq org-export-with-date nil)
    (when (file-readable-p org-input-file)
      (make-directory (file-name-directory output-file) t)
      (opeteceu--string-to-file cubes-stylesheet (concat (file-name-directory output-file) "stylesheet.css"))  ; Generate CSS file from variable
      ;; Create Markdown file from Org file as basis for Pandoc ePub generation.
      (with-temp-buffer
        (insert-file-contents org-input-file)
        (org-mode)
        (opeteceu--fold-show-all)
        (goto-char (point-min))
        (when (org-goto-first-child)
          (beginning-of-line)
          (insert "\n")
          (forward-line -1)
          ;; If graphic available, a cover will be generated. Start will argument that will need to be passed to Imagemagick.
          (when (file-readable-p opeteceu--cover-graphic)
            (setq cover-graphic-arg (concat " -draw \"image over 0,-800 0,0 \'" opeteceu--cover-graphic "\'\"")))
          ;; Generate Imagemagick argument for book title. If book title is longer than 20 characters, split into multiple lines.
          (if (> (length (opeteceu--get-file-property-value org-input-file "TITLE")) 20)
              (progn
                (setq title-words (split-string (opeteceu--get-file-property-value org-input-file "TITLE") " "))
                (while title-words
                  (setq curr-word (car title-words))
                  (setq title-words (cdr title-words))
                  (if (< (+ (length curr-line) (length curr-word)) 20)
                      (if (< (length curr-line) 1)
                          (setq curr-line curr-word)
                        (setq curr-line (concat curr-line " " curr-word)))
                    (if title-words
                        (progn
                          (setq title-lines (cons curr-line title-lines))
                          (setq curr-line curr-word))
                      (progn
                        (setq title-lines (cons curr-line title-lines))
                        (setq title-lines (cons curr-word title-lines))))))
                (setq title-lines (reverse title-lines))
                (while title-lines
                  (setq title-graphic-arg (concat title-graphic-arg "-draw \"text 0," (number-to-string curr-title-pos) " \'" (car title-lines) "\'\" "))
                  (setq curr-title-pos (+ curr-title-pos 160))
                  (setq title-lines (cdr title-lines)))
                (setq title-graphic-arg (concat "-draw \"line 100,1120 1500,1120\" -draw \"line 100," (number-to-string (+ 1280 curr-title-pos)) " 1500," (number-to-string (+ 1280 curr-title-pos)) "\" " title-graphic-arg )))
            (progn
              (setq title-graphic-arg (concat "-draw \"line 100,1120 1500,1120\" -draw \"line 100,1440 1500,1440\" -draw \"text 0,0 \'" (opeteceu--get-file-property-value org-input-file "TITLE") "\'\" "))))
          ;; If Imagemagick is available, generate cover.
          (when (and (executable-find "magick") (file-readable-p opeteceu--cover-graphic))
            (shell-command (concat "magick -size 1600x2560 xc:white -fill black -stroke black -font \"Josefin-Sans\" -pointsize 126 -gravity center " title-graphic-arg  " -font \"Alegreya-SC\" -pointsize 72 -draw \"text 0,800 \'" (opeteceu--get-file-property-value org-input-file "AUTHOR") "\'\"" cover-graphic-arg " \"" (file-name-directory temp-org) "cover.png\""))
            (setq opeteceu--cover (concat (file-name-directory temp-org) "cover.png")))
          ;; Markdown meta data and legal info.
          (insert "#+BEGIN_EXPORT md\n"
                  "---\n"
                  "title:\n"
                  "- type: main\n"
                  "  text: " (opeteceu--get-file-property-value org-input-file "TITLE") "\n"
                  "creator:\n"
                  "- role: author\n"
                  "  text: " (opeteceu--get-file-property-value org-input-file "AUTHOR") "\n"
                  "publisher: " opeteceu--publisher "\n"
                  "rights: " opeteceu--rights "\n"
                  "date: " (opeteceu--format-time-string "%Y" (org-time-from-absolute (org-time-string-to-absolute (opeteceu--get-file-property-value org-input-file "DATE")))) "\n"
                  "lang: " opeteceu--language "\n"
                  "toc-title: Contents\n")
          (when (file-readable-p opeteceu--cover)
            (insert "cover-image: " opeteceu--cover "\n"))
          (insert "...\n"
                  "\n"
                  "#   {.unnumbered .unlisted}\n\n"
                  "Author: " (opeteceu--get-file-property-value org-input-file "AUTHOR") "\\\n"
                  "Cover: Cube Family by Martin Anderson (2012 – ?)\\\n"
                  "Made with Blender 3D - <http://www.blender.org>\n"
                  "\n"
                  "This book, including the cover art, is copyright &copy; " (opeteceu--format-time-string "%Y" (org-time-from-absolute (org-time-string-to-absolute (opeteceu--get-file-property-value org-input-file "DATE"))))
                  " " (opeteceu--get-file-property-value org-input-file "AUTHOR") ".\n"
                  "\n")
          (if (or (string= opeteceu--rights "Creative Commons Attribution-Non-Commercial-ShareAlike 4.0 International License") (string= opeteceu--rights "by-nc-sa"))
              (insert "The electronic forms of this book, including the cover art, are licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. To view a copy of this license, visit:\\\n"
                      "<http://creativecommons.org/licenses/by-nc-sa/4.0/> \\\n"
                      "Or, send a letter to Creative Commons, PO Box 1866, MountainView, CA 94042, USA.\n")
            (insert opeteceu--rights "\n"))
          (insert "\n"
                  "The author assumes no liability for errors or omissions in this book, or for damages or loss of revenue resulting from the use of the information contained herein. The characters and incidents portrayed in this book are fictional. Any similarities to real persons, living, dead or yet to exist, is entirely coincidental.\n"
                  "\n")
          (unless (string= (opeteceu--get-file-property-value org-input-file "EMAIL") "")
            (insert "You can contact the author via e-mail:\\\n"
                    "<" (opeteceu--get-file-property-value org-input-file "EMAIL") ">\n"
                    "\n"))
          (unless (string= opeteceu--isbn "")
            (insert "ISBN " opeteceu--isbn "\n"
                    "\n"))
          (insert opeteceu--edition ": " (opeteceu--format-time-string "%B %Y" (org-time-from-absolute (org-time-string-to-absolute (opeteceu--get-file-property-value org-input-file "DATE")))) "\n"
                  "\n")
          (when (file-readable-p opeteceu--sigil-graphic)
            (insert "<div class=\"center\">\n"
                    "![Sigil](" opeteceu--sigil-graphic " \"Sigil\"){ width=10% }\\\n"
                    "</div>\n"))
          (insert "<div id=\"endmeta\"></div>\n"
                  "#+END_EXPORT\n"))
        (goto-char (point-min))
        (insert "\n")
        (goto-char (point-min))
        (while (not (org-next-visible-heading 1))
          ;; Check matter type and replace appropriately, convert heading level to same output level. If no matter type, assume front matter.
          (cond ((string= (org-entry-get (point) "ORG-NOVELIST-MATTER-TYPE") "FRONT MATTER")
                 (setq curr-heading (nth 4 (org-heading-components)))
                 (setq curr-level (org-current-level))
                 (setq curr-heading (replace-regexp-in-string (regexp-quote "&") "&amp;" curr-heading nil t))
                 (beginning-of-line)
                 (opeteceu--delete-line)
                 (setq beg (point))
                 (re-search-forward ":END:" nil t)
                 (delete-region beg (point))
                 (opeteceu--delete-line)
                 (insert "#+BEGIN_EXPORT md\n")
                 (while (> curr-level 0)
                   (setq curr-level (- curr-level 1))
                   (insert "#"))
                 (insert " " curr-heading " {.unnumbered}\n"
                         "\n"
                         "---\n"
                         "#+END_EXPORT\n"))
                ((string= (org-entry-get (point) "ORG-NOVELIST-MATTER-TYPE") "MAIN MATTER")
                 (setq curr-heading (nth 4 (org-heading-components)))
                 (setq curr-level (org-current-level))
                 (setq curr-heading (replace-regexp-in-string (regexp-quote "&") "&amp;" curr-heading nil t))
                 (setq chap-num (+ chap-num 1))
                 (beginning-of-line)
                 (opeteceu--delete-line)
                 (setq beg (point))
                 (re-search-forward ":END:" nil t)
                 (delete-region beg (point))
                 (opeteceu--delete-line)
                 (insert "#+BEGIN_EXPORT md\n")
                 (while (> curr-level 0)
                   (setq curr-level (- curr-level 1))
                   (insert "#"))
                 (insert " Chapter " (number-to-string chap-num) " --- " curr-heading "\n"
                         "\n"
                         "---\n"
                         "#+END_EXPORT\n"))
                ((string= (org-entry-get (point) "ORG-NOVELIST-MATTER-TYPE") "BACK MATTER")
                 (setq curr-heading (nth 4 (org-heading-components)))
                 (setq curr-level (org-current-level))
                 (setq curr-heading (replace-regexp-in-string (regexp-quote "&") "&amp;" curr-heading nil t))
                 (beginning-of-line)
                 (opeteceu--delete-line)
                 (setq beg (point))
                 (re-search-forward ":END:" nil t)
                 (delete-region beg (point))
                 (opeteceu--delete-line)
                 (insert "#+BEGIN_EXPORT md\n")
                 (while (> curr-level 0)
                   (setq curr-level (- curr-level 1))
                   (insert "#"))
                 (insert " " curr-heading " {.unnumbered}\n"
                         "\n"
                         "---\n"
                         "#+END_EXPORT\n"))
                (t
                 (setq curr-heading (nth 4 (org-heading-components)))
                 (setq curr-level (org-current-level))
                 (setq curr-heading (replace-regexp-in-string (regexp-quote "&") "&amp;" curr-heading nil t))
                 (beginning-of-line)
                 (opeteceu--delete-line)
                 (setq beg (point))
                 (re-search-forward ":END:" nil t)
                 (delete-region beg (point))
                 (opeteceu--delete-line)
                 (insert "#+BEGIN_EXPORT md\n")
                 (while (> curr-level 0)
                   (setq curr-level (- curr-level 1))
                   (insert "#"))
                 (insert " " curr-heading " {.unnumbered}\n"
                         "\n"
                         "---\n"
                         "#+END_EXPORT\n"))))
        ;; Remove shy inclusions. HTML won't process them correctly, and clearly doesn't need them anyway.
        (goto-char (point-min))
        (let ((case-fold-search t))
          (while (re-search-forward "\\\\-" nil t)
            (delete-char -2)))
        (goto-char (point-min))
        (opeteceu--delete-line)
        (opeteceu--string-to-file (buffer-string) temp-org)))  ; Write new Org file to be fed to exporter
    (setq undo-tree-auto-save-history nil)  ; Try to prevent undo-tree making back-ups for autogenerated files
    (find-file temp-org)
    (org-md-export-to-markdown)  ; Use Org mode's built-in Markdown exporter to generate the file to be fed to Pandoc
    (opeteceu--delete-current-file t)
    (setq org-export-with-toc org-export-with-toc-orig)
    (setq org-export-with-title org-export-with-title-orig)
    (setq org-export-with-author org-export-with-author-orig)
    (setq org-export-with-email org-export-with-email-orig)
    (setq org-export-with-date org-export-with-date-orig)
    (make-directory (file-name-directory output-file) t)
    ;; Use Pandoc to create the ePub file from the Markdown file.
    (when (executable-find "pandoc")
      (shell-command (concat "pandoc \'" (file-name-sans-extension temp-org) ".md\'  -f markdown+smart -t epub --css \'" (file-name-directory output-file)  "stylesheet.css\' --toc -s -o \'" (file-name-sans-extension temp-org) ".epub\'"))
      (when (file-exists-p (concat (file-name-sans-extension temp-org) ".epub"))
        (rename-file (concat (file-name-sans-extension temp-org) ".epub") (concat (file-name-sans-extension output-file) ".epub") t)))
    ;; If available, use Calibre's ebook-convert to generate an azw3 file from the ePub file.
    (when (executable-find "ebook-convert")
      (when (file-readable-p (concat (file-name-sans-extension output-file) ".epub"))
        (shell-command-to-string (concat "ebook-convert \'" (file-name-sans-extension output-file) ".epub\' \'" (file-name-sans-extension output-file) ".azw3\' --no-inline-toc"))))
    (when (file-exists-p (concat (file-name-sans-extension temp-org) ".md"))
      (rename-file (concat (file-name-sans-extension temp-org) ".md") (concat (file-name-sans-extension output-file) ".md") t))
    (find-file (concat (file-name-directory output-file) "stylesheet.css"))
    (opeteceu--delete-current-file t)
    (setq undo-tree-auto-save-history undo-tree-auto-save-history-orig)))

(provide 'org-pandoc-export-to-epub-cubes-en-us)
;;; org-pandoc-export-to-epub-cubes-en-us.el ends here

;; Local Variables:
;; read-symbol-shorthands: (("opeteceu-" . "org-pandoc-export-to-epub-cubes-en-us-"))
;; End:
